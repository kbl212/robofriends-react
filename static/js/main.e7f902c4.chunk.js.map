{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","components/CounterButton.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","console","log","cardsArray","map","user","i","key","SearchBox","searchfield","searchChange","aria-label","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","CounterButton","updateCount","count","nextProps","nextState","color","onClick","Header","App","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","initialStateSearch","initialStateRequest","rootReducer","createLogger","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e7f902c4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id}) => {\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n      <div>\n        <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} />\n        <div>\n          <h2>{name}</h2>\n          <p>{email}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({ robots }) => {\n  console.log('CardList');\n  const cardsArray = robots.map((user, i) => {\n    return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email}/>\n  })\n  return (\n    <div>\n      {cardsArray}\n    </div>\n  );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n  console.log('SearchBox');\n  return (\n    <input\n      aria-label='Search Robots'\n      className='pa3 ba b--green bg-lightest-blue'\n      type='search'\n      placeholder='search robots...'\n      onChange={searchChange}\n    />\n  )\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n  return (\n    <div style={{overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\n      {props.children}\n    </div>\n  )\n}\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    }\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1>There was an error displaying this component</h1>\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundary;","import React from 'react';\n\nclass CounterButton extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      count: 0\n    };\n  }\n\n  // can also use a PureComponent instead of doing this check\n  shouldComponentUpdate(nextProps, nextState) {\n    // only update if count was actually update\n    if (this.state.count !== nextState.count) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n\n  updateCount = () => {\n    this.setState(state => {\n      return { count: this.state.count + 1 };\n    })\n  }\n\n  render() {\n    console.log('CounterButton');\n    return (\n      <button color={this.props.color} onClick={this.updateCount}>\n        Count: {this.state.count}\n      </button>\n    )\n  }\n}\n\nexport default CounterButton;","import React from 'react';\nimport CounterButton from './CounterButton';\n\nclass Header extends React.Component {\n  // default return value is true\n  shouldComponentUpdate() {\n    return false;\n  }\n\n  render() {\n    console.log('Header');\n    return (\n      <div>\n        <h1 className='f1'>RoboFriends</h1>\n        <CounterButton color={'red'} />\n      </div>\n    )\n  }\n}\n\nexport default Header;","import React from 'react';\nimport { connect } from 'react-redux';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary';\nimport Header from '../components/Header';\n\nimport { setSearchField, requestRobots } from '../actions';\n\nconst mapStateToProps = state => {\n  console.log(state);\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots:  () => dispatch(requestRobots())\n  }\n}\nclass App extends React.Component {\n\n  componentDidMount() {\n    this.props.onRequestRobots();\n  }\n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase());\n    });\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n      <div className='tc'>\n      <Header />\n        <SearchBox searchChange={onSearchChange}/>\n        <Scroll>\n          <ErrorBoundary>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundary>\n        </Scroll>\n      </div>\n      )\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS\n} from './constants';\n\nexport const setSearchField = (text) => ({\n  type: CHANGE_SEARCH_FIELD,\n  payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n  dispatch({ type: REQUEST_ROBOTS_PENDING});\n  fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => {\n      return response.json()\n    })\n    .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n    .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error}))\n}\n\n// entry, output, loaders, plugins","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {\n  CHANGE_SEARCH_FIELD,\n  REQUEST_ROBOTS_FAILED,\n  REQUEST_ROBOTS_PENDING,\n  REQUEST_ROBOTS_SUCCESS\n} from './constants';\n\nconst initialStateSearch = {\n  searchField: ''\n}\n\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\n  switch(action.type) {\n    case CHANGE_SEARCH_FIELD:\n      return Object.assign({}, state, {searchField: action.payload});\n    default:\n      return state;\n  }\n}\n\nconst initialStateRequest = {\n  isPending: false,\n  robots: [],\n  error: ''\n}\n\nexport const requestRobots = (state=initialStateRequest, action={}) => {\n  switch(action.type) {\n    case REQUEST_ROBOTS_PENDING:\n      return Object.assign({}, state, { isPending: true });\n    case REQUEST_ROBOTS_SUCCESS:\n      return Object.assign({}, state, { robots: action.payload, isPending: false });\n    case REQUEST_ROBOTS_FAILED:\n      return Object.assign({}, state, { error: action.payload , isPending: false});\n    default:\n      return state;\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({ searchRobots, requestRobots})\n// This is ordered...will go through thunkMiddleware first, then logger\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\n\nReactDOM.render(\n  <div>\n                <Provider store={store}><App /></Provider>\n                </div>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}